void GamePlay::dice_throw(int &p1_armies, int &p2_armies)
{
	int attacker_amount = 0;
	int defender_amount = 0;

	int attacker_dice[3] = { 0,0,0 };
	int defender_dice[2] = { 0,0 };

	if (p1_armies == 1)
	{
		cout << "You have too few armies to attack with. You need two armies to attack" << endl;
	}
	else if (p1_armies >= 4)
	{
		attacker_amount = 3;
	}
	else
	{
		attacker_amount = p1_armies - 1;
	}

	if (p2_armies == 1 || p2_armies == 2)
	{
		defender_amount = 1;
	}
	else
	{
		defender_amount = 2;
	}

	for (int i = 0; i < attacker_amount; i++)
	{
		attacker_dice[i] = std::rand() % 6 + 1;
	}
	for (int i = 0; i < defender_amount; i++)
	{
		defender_dice[i] = std::rand() % 6 + 1; 
	}

	
	//Sorting the dice in order to make comparing easier

	for (int i = 0; i < attacker_amount - 1; i++)
	{
		for (int j = 0; j < attacker_amount - i - 1; j++)
		{
			if (attacker_dice[j] < attacker_dice[j + 1]) 
			{
				int temp = attacker_dice[j];
				attacker_dice[j] = attacker_dice[j + 1]; 
				attacker_dice[j + 1] = temp; 
			}
		}
	}

	if (defender_amount == 2)
	{
		if (defender_dice[0] < defender_dice[1])
		{
			int ph = defender_dice[0]; 
			defender_dice[0] = defender_dice[1];
			defender_dice[1] = ph;  
		}
	}

	cout << "The Attacker's dice was: " << endl;

	for (int i = 0; i < attacker_amount; i++)
	{
		cout << attacker_dice[i] << endl;
	}

	cout << "\nThe Defender's dice was: " << endl;
	for (int i = 0; i < defender_amount; i++)
	{
		cout << defender_dice[i] << endl;
	}

	int attacker_defeats = 0; 
	int defender_defeats = 0; 

	if (attacker_dice[0] > defender_dice[0])
	{
		defender_defeats++;
	}
	else if(attacker_dice[0] <= defender_dice[0])
	{
		attacker_defeats++; 
	}

	if (attacker_amount > 2 && defender_amount == 2)
	{
		if (attacker_dice[1] > defender_dice[1])
		{
			defender_defeats++;
		}
		else if (attacker_dice[1] <= defender_dice[1])
		{
			attacker_defeats++;
		}

	}


	cout << "Attacker armies lost: " << attacker_defeats << endl; 
	cout << "Defender Armies lost: " << defender_defeats << endl;   

	p1_armies = p1_armies - attacker_defeats; 
	p2_armies = p2_armies - defender_defeats;  

}
